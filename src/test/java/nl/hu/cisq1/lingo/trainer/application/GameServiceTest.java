package nl.hu.cisq1.lingo.trainer.application;

import nl.hu.cisq1.lingo.trainer.data.SpringGameRepository;
import nl.hu.cisq1.lingo.trainer.domain.Game;
import nl.hu.cisq1.lingo.words.application.WordService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Optional;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class GameServiceTest {
    @Test
    @DisplayName("start new game")
    void startGame() {
        WordService wordService = mock(WordService.class);
        SpringGameRepository repository = mock(SpringGameRepository.class);
        GameService service = new GameService(wordService, repository);

        GameProgress progress = service.startNewGame();

        // id is autogenerated
        assertEquals(0, progress.getScore());
        assertEquals(Game.GameState.WAITING_FOR_ROUND, progress.getGameState());
        assertNull(progress.getHint());
        assertNull(progress.getFeedback());
    }

    @Test
    @DisplayName("start new round")
    void startRound() {
        WordService wordService = mock(WordService.class);
        when(wordService.provideRandomWord(5))
                .thenReturn("tafel");

        Game game = new Game();
        game.startGame();

        SpringGameRepository repository = mock(SpringGameRepository.class);
        when(repository.findById(anyLong()))
                .thenReturn(Optional.of(game));

        GameService service = new GameService(wordService, repository);
        GameProgress progress = service.startNewRound(-1L);

        // id is autogenerated
        assertEquals(0, progress.getScore());
        assertEquals(Game.GameState.PLAYING, progress.getGameState());
        assertEquals("t....", progress.getHint());
        assertNull(progress.getFeedback());
    }
}